Classfile /Users/zhangshaopeng/Desktop/fun/HelloByteCode.class
  Last modified 2021-6-24; size 793 bytes
  MD5 checksum 10ad764abaa5101732b6451ad633bb9b
  Compiled from "HelloByteCode.java"
public class HelloByteCode
  minor version: 0
  major version: 52 - JDK8
  flags: ACC_PUBLIC, ACC_SUPER
Constant pool:  - 常量池，线程私有
   #1 = Methodref          #7.#31         // java/lang/Object."<init>":()V
   #2 = String             #32            // Hello World
   #3 = String             #33            // Goods
   #4 = Fieldref           #34.#35        // java/lang/System.out:Ljava/io/PrintStream;
   #5 = Methodref          #36.#37        // java/io/PrintStream.println:(Ljava/lang/String;)V
   #6 = Class              #38            // HelloByteCode
   #7 = Class              #39            // java/lang/Object
   #8 = Utf8               <init>
   #9 = Utf8               ()V
  #10 = Utf8               Code
  #11 = Utf8               LineNumberTable
  #12 = Utf8               LocalVariableTable
  #13 = Utf8               this
  #14 = Utf8               LHelloByteCode;
  #15 = Utf8               main
  #16 = Utf8               ([Ljava/lang/String;)V
  #17 = Utf8               i
  #18 = Utf8               I
  #19 = Utf8               args
  #20 = Utf8               [Ljava/lang/String;
  #21 = Utf8               a
  #22 = Utf8               b
  #23 = Utf8               c
  #24 = Utf8               test
  #25 = Utf8               Ljava/lang/String;
  #26 = Utf8               StackMapTable
  #27 = Class              #20            // "[Ljava/lang/String;"
  #28 = Class              #40            // java/lang/String
  #29 = Utf8               SourceFile
  #30 = Utf8               HelloByteCode.java
  #31 = NameAndType        #8:#9          // "<init>":()V
  #32 = Utf8               Hello World
  #33 = Utf8               Goods
  #34 = Class              #41            // java/lang/System
  #35 = NameAndType        #42:#43        // out:Ljava/io/PrintStream;
  #36 = Class              #44            // java/io/PrintStream
  #37 = NameAndType        #45:#46        // println:(Ljava/lang/String;)V
  #38 = Utf8               HelloByteCode
  #39 = Utf8               java/lang/Object
  #40 = Utf8               java/lang/String
  #41 = Utf8               java/lang/System
  #42 = Utf8               out
  #43 = Utf8               Ljava/io/PrintStream;
  #44 = Utf8               java/io/PrintStream
  #45 = Utf8               println
  #46 = Utf8               (Ljava/lang/String;)V
{
  public HelloByteCode();   - 构造函数
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #1                  // Method java/lang/Object."<init>":()V
         4: return
      LineNumberTable:
        line 1: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   LHelloByteCode;

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V  - 参数String[]，返回结果V=void
    flags: ACC_PUBLIC, ACC_STATIC       - public static 的方法
    Code:
      stack=3, locals=6, args_size=1    - 本地方法栈深度为3，本地变量表长度为6，参数长度为1
         0: iconst_3    - 常量3压入栈
         1: istore_1    - 弹出栈顶的3，存入本地变量表第1个位置
         2: iconst_2    - 常量2压入栈
         3: istore_2    - 弹出栈顶的2，存入本地变量表第2个位置
         4: iload_2     - 本地变量表第2个位置压入栈，即b
         5: iload_1     - 本地变量表第1个位置压入栈，即a
         6: iconst_3    - 常量3压入栈
         7: iadd        - 栈顶前两个数相加，即a+3，并压入栈
         8: imul        - 栈顶前两个数相乘，即b*(a + 3)，并压入栈
         9: iconst_4    - 常量4压入栈
        10: isub        - 栈顶前两个数相减，即b*(a+3)-4，并压入栈，此时栈中只有计算的结果
        11: istore_3    - 弹出栈顶的计算结果，存入本地变量表第3个位置
        12: ldc           #2                  // String Hello World     - 将字符串常量压入栈
        14: astore        4     - 弹出栈顶的字符串常量，存入本地变量表第4个位置
        16: iload_3             - 本地变量表第3个位置压入栈，即c
        17: bipush        10    - 将常量10压入栈
        19: if_icmple     26    - 栈中数据比较
        22: ldc           #3                  // String Goods   - 将字符串常量压入栈
        24: astore        4     - 弹出栈顶的字符串常量，存入本地变量表第4个位置
        26: iconst_0 - 常量0压入栈
        27: istore        5     - 弹出栈顶的0，存入本地变量表第5个位置
        29: iload         5     - 本地变量表第5个位置压入栈，即i
        31: bipush        10    - 将常量10压入栈
        33: if_icmpge     50    - 栈中数据比较
        36: getstatic     #4                  // Field java/lang/System.out:Ljava/io/PrintStream;   - 获取静态方法，并压入栈
        39: aload         4     - 本地变量表第4个位置压入栈，即test
        41: invokevirtual #5                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V   - 调用方法
        44: iinc          5, 1  - 本地变量表第5个位置加1
        47: goto          29    - 跳转到29行
        50: return
      LineNumberTable:
        line 4: 0
        line 5: 4
        line 7: 12
        line 8: 16
        line 9: 22
        line 12: 26
        line 13: 36
        line 12: 44
        line 15: 50
      LocalVariableTable:   - 本地变量表
        Start  Length  Slot  Name   Signature
           29      21     5     i   I
            0      51     0  args   [Ljava/lang/String;
            2      49     1     a   I
            4      47     2     b   I
           12      39     3     c   I
           16      35     4  test   Ljava/lang/String;
      StackMapTable: number_of_entries = 3
        frame_type = 255 /* full_frame */
          offset_delta = 26
          locals = [ class "[Ljava/lang/String;", int, int, int, class java/lang/String ]
          stack = []
        frame_type = 252 /* append */
          offset_delta = 2
          locals = [ int ]
        frame_type = 250 /* chop */
          offset_delta = 20
}
SourceFile: "HelloByteCode.java"